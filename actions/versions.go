package actions

import (
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/gobuffalo/uuid"
	"github.com/mataram/genos/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Version)
// DB Table: Plural (versions)
// Resource: Plural (Versions)
// Path: Plural (/versions)
// View Template Folder: Plural (/templates/versions/)

// VersionsResource is the resource for the Version model
type VersionsResource struct {
	buffalo.Resource
}

// List gets all Versions. This function is mapped to the path
// GET /versions
func (v VersionsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	versions := &models.Versions{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Versions from the DB
	if err := q.All(versions); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)
	breadcrumbs := []models.Breadcrumb{}
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"/", "Home"})
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"/versions", "Versions"})
	c.Set("breadcrumbs", breadcrumbs)

	return c.Render(200, r.Auto(c, versions))
}

// Show gets the data for one Version. This function is mapped to
// the path GET /versions/{version_id}
func (v VersionsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Version
	version := &models.Version{}

	// To find the Version the parameter version_id is used.
	if err := tx.Find(version, c.Param("version_id")); err != nil {
		return c.Error(404, err)
	}

	tx.Find(&version.Event, c.Param("event_id"))
	tx.Find(&version.Event.Service, version.Event.ServiceID)
	breadcrumbs := version.GetBreadcumbs()
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"#", "Show"})
	c.Set("breadcrumbs", breadcrumbs)

	tx.Load(version)

	return c.Render(200, r.Auto(c, version))
}

// New renders the form for creating a new Version.
// This function is mapped to the path GET /versions/new
func (v VersionsResource) New(c buffalo.Context) error {
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	version := &models.Version{}
	eventId, err := uuid.FromString(c.Param("event_id"))

	if err == nil {
		version.EventID = eventId
	} else {
		return errors.WithStack(err)
	}

	// To find the Event the parameter event_id is used.
	if err := tx.Find(&version.Event, c.Param("event_id")); err != nil {
		return c.Error(404, err)
	}

	tx.Find(&version.Event.Service, version.Event.ServiceID)
	breadcrumbs := version.GetBreadcumbs()
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"#", "New"})
	c.Set("breadcrumbs", breadcrumbs)

	return c.Render(200, r.Auto(c, version))
}

// Create adds a Version to the DB. This function is mapped to the
// path POST /versions
func (v VersionsResource) Create(c buffalo.Context) error {
	// Allocate an empty Version
	version := &models.Version{}

	output := "["

	if c.Param("OutputGcs") == "true" {
		output = output + "\"gcs\""
	}

	if c.Param("OutputBq") == "true" {
		output = output + ",\"bq\""
	}

	output = output + "]"
	version.Output = output

	// Bind version to the html form elements
	if err := c.Bind(version); err != nil {
		return errors.WithStack(err)
	}

	breadcrumbs := version.GetBreadcumbs()
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"#", "New"})
	c.Set("breadcrumbs", breadcrumbs)

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(version)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, version))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Version was created successfully")

	// and redirect to the versions index page
	return c.Render(201, r.Auto(c, version))
}

// Edit renders a edit form for a Version. This function is
// mapped to the path GET /versions/{version_id}/edit
func (v VersionsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Version
	version := &models.Version{}

	if err := tx.Find(version, c.Param("version_id")); err != nil {
		return c.Error(404, err)
	}

	tx.Find(&version.Event, c.Param("event_id"))
	tx.Find(&version.Event.Service, version.Event.ServiceID)

	breadcrumbs := version.GetBreadcumbs()
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"#", "Edit"})
	c.Set("breadcrumbs", breadcrumbs)

	return c.Render(200, r.Auto(c, version))
}

// Update changes a Version in the DB. This function is mapped to
// the path PUT /versions/{version_id}
func (v VersionsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Version
	version := &models.Version{}

	breadcrumbs := version.GetBreadcumbs()
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"#", "Update"})
	c.Set("breadcrumbs", breadcrumbs)

	if err := tx.Find(version, c.Param("version_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Version to the html form elements
	if err := c.Bind(version); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(version)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, version))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Version was updated successfully")

	// and redirect to the versions index page
	return c.Render(200, r.Auto(c, version))
}

// Destroy deletes a Version from the DB. This function is mapped
// to the path DELETE /versions/{version_id}
func (v VersionsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Version
	version := &models.Version{}

	breadcrumbs := version.GetBreadcumbs()
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"#", "Destroy"})
	c.Set("breadcrumbs", breadcrumbs)

	// To find the Version the parameter version_id is used.
	if err := tx.Find(version, c.Param("version_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(version); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Version was destroyed successfully")

	// Redirect to the events index page
	return c.Redirect(http.StatusFound, "/services/"+c.Param("service_id")+"/events/"+c.Param("event_id"))
}
