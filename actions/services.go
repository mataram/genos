package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/mataram/genos/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Service)
// DB Table: Plural (services)
// Resource: Plural (Services)
// Path: Plural (/services)
// View Template Folder: Plural (/templates/services/)

// ServicesResource is the resource for the Service model
type ServicesResource struct {
	buffalo.Resource
}

// List gets all Services. This function is mapped to the path
// GET /services
func (v ServicesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	services := &models.Services{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Services from the DB
	if err := q.All(services); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	breadcrumbs := []models.Breadcrumb{}
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"/", "Home"})
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"/services", "Services"})
	c.Set("breadcrumbs", breadcrumbs)

	return c.Render(200, r.Auto(c, services))
}

// Show gets the data for one Service. This function is mapped to
// the path GET /services/{service_id}
func (v ServicesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Service
	service := &models.Service{}
	breadcrumbs := service.GetBreadcumbs()
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"#", "Show"})
	c.Set("breadcrumbs", breadcrumbs)

	// To find the Service the parameter service_id is used.
	if err := tx.Find(service, c.Param("service_id")); err != nil {
		return c.Error(404, err)
	}

	// To find the Service the parameter service_id is used.
	if err := tx.Load(service); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, service))
}

// New renders the form for creating a new Service.
// This function is mapped to the path GET /services/new
func (v ServicesResource) New(c buffalo.Context) error {

	service := &models.Service{}
	breadcrumbs := service.GetBreadcumbs()
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"#", "New"})
	c.Set("breadcrumbs", breadcrumbs)

	return c.Render(200, r.Auto(c, service))
}

// Create adds a Service to the DB. This function is mapped to the
// path POST /services
func (v ServicesResource) Create(c buffalo.Context) error {
	// Allocate an empty Service
	service := &models.Service{}
	breadcrumbs := service.GetBreadcumbs()
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"#", "Create"})
	c.Set("breadcrumbs", breadcrumbs)

	// Bind service to the html form elements
	if err := c.Bind(service); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(service)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, service))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Service was created successfully")

	// and redirect to the services index page
	return c.Render(201, r.Auto(c, service))
}

// Edit renders a edit form for a Service. This function is
// mapped to the path GET /services/{service_id}/edit
func (v ServicesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Service
	service := &models.Service{}

	if err := tx.Find(service, c.Param("service_id")); err != nil {
		return c.Error(404, err)
	}

	breadcrumbs := service.GetBreadcumbs()
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"#", "Edit"})
	c.Set("breadcrumbs", breadcrumbs)

	return c.Render(200, r.Auto(c, service))
}

// Update changes a Service in the DB. This function is mapped to
// the path PUT /services/{service_id}
func (v ServicesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Service
	service := &models.Service{}

	if err := tx.Find(service, c.Param("service_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Service to the html form elements
	if err := c.Bind(service); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(service)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, service))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Service was updated successfully")
	breadcrumbs := service.GetBreadcumbs()
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"#", "Update"})
	c.Set("breadcrumbs", breadcrumbs)

	// and redirect to the services index page
	return c.Render(200, r.Auto(c, service))
}

// Destroy deletes a Service from the DB. This function is mapped
// to the path DELETE /services/{service_id}
func (v ServicesResource) Destroy(c buffalo.Context) error {
	breadcrumbs := []models.Breadcrumb{}
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"/", "Home"})
	breadcrumbs = append(breadcrumbs, models.Breadcrumb{"/services", "Services"})

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Service
	service := &models.Service{}

	// To find the Service the parameter service_id is used.
	if err := tx.Find(service, c.Param("service_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(service); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Service was destroyed successfully")

	// Redirect to the services index page
	return c.Render(200, r.Auto(c, service))
}
